Here is an example code for the e-commerce platform using microservices architecture, Spring Boot, and Java:

Product Catalog Service

Product.java

@Entity
public class Product {
  
  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Long id;
  
  private String name;
  
  private Double price;
  
  // Getters and setters
}


ProductRepository.java

public interface ProductRepository extends JpaRepository<Product, Long> {
}


ProductService.java

@Service
public class ProductService {
  
  @Autowired
  private ProductRepository productRepository;
  
  public List<Product> getAllProducts() {
    return productRepository.findAll();
  }
  
  public Product getProductById(Long id) {
    return productRepository.findById(id).orElseThrow();
  }
  
  public Product createProduct(Product product) {
    return productRepository.save(product);
  }
  
  public Product updateProduct(Product product) {
    return productRepository.save(product);
  }
  
  public void deleteProduct(Long id) {
    productRepository.deleteById(id);
  }
}


ProductController.java

@RestController
@RequestMapping("/api/products")
public class ProductController {
  
  @Autowired
  private ProductService productService;
  
  @GetMapping
  public List<Product> getAllProducts() {
    return productService.getAllProducts();
  }
  
  @GetMapping("/{id}")
  public Product getProductById(@PathVariable Long id) {
    return productService.getProductById(id);
  }
  
  @PostMapping
  public Product createProduct(@RequestBody Product product) {
    return productService.createProduct(product);
  }
  
  @PutMapping("/{id}")
  public Product updateProduct(@PathVariable Long id, @RequestBody Product product) {
    return productService.updateProduct(product);
  }
  
  @DeleteMapping("/{id}")
  public void deleteProduct(@PathVariable Long id) {
    productService.deleteProduct(id);
  }
}


User Service

User.java

@Entity
public class User {
  
  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Long id;
  
  private String username;
  
  private String password;
  
  // Getters and setters
}


UserRepository.java

public interface UserRepository extends JpaRepository<User, Long> {
}


UserService.java

@Service
public class UserService {
  
  @Autowired
  private UserRepository userRepository;
  
  public List<User> getAllUsers() {
    return userRepository.findAll();
  }
  
  public User getUserById(Long id) {
    return userRepository.findById(id).orElseThrow();
  }
  
  public User createUser(User user) {
    return userRepository.save(user);
  }
  
  public User updateUser(User user) {
    return userRepository.save(user);
  }
  
  public void deleteUser(Long id) {
    userRepository.deleteById(id);
  }
}


UserController.java

@RestController
@RequestMapping("/api/users")
public class UserController {
  
  @Autowired
  private UserService userService;
  
  @GetMapping
  public List<User> getAllUsers() {
    return userService.getAllUsers();
  }
  
  @GetMapping("/{id}")
  public User getUserById(@PathVariable Long id) {
    return userService.getUserById(id);
  }
  
  @PostMapping
  public User createUser(@RequestBody User user) {
    return userService.createUser(user);
  }
  
  @PutMapping("/{id}")
  public User updateUser(@PathVariable Long id, @RequestBody User user) {
    return userService.updateUser(user);
  }
  
  @DeleteMapping("/{id}")
  public void deleteUser(@PathVariable Long id) {
    userService.deleteUser(id);
  }
}


Order Service

Order.java

@Entity
public class Order {
  
  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Long id;
  
  private Date orderDate;
  
  private Double total;
  
  @ManyToOne
  @JoinColumn(name = "user_id")
  private User user;
  
  // Getters and setters
}


OrderRepository.java

public interface OrderRepository extends JpaRepository<Order, Long> {
}


OrderService.java

@Service
public class OrderService {
  
  @Autowired
  private OrderRepository orderRepository;
  
  public List<Order> getAllOrders() {
    return orderRepository.findAll();
  }
  
  public Order getOrderById(Long id) {
    return orderRepository.findById(id).orElseThrow();
  }
  
  public Order createOrder(Order order) {
    return orderRepository.save(order);
  }
  
  public Order updateOrder(Order order) {
    return orderRepository.save(order);
  }
  
  public void deleteOrder(Long id) {
    orderRepository.deleteById(id);
  }
}


OrderController.java

@RestController
@RequestMapping("/api/orders")
public class OrderController {
  
  @Autowired
  private OrderService orderService;
  
  @GetMapping
  public List<Order> getAllOrders() {
    return orderService.getAllOrders
